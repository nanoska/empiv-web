from django.contrib import admin
from .models import *

admin.site.register(Event)
admin.site.register(Location)
from django.apps import AppConfig


class EventsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'events'
from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from .models import *


class EventForm(forms.ModelForm):
    class Meta:
        model = Event
        fields = ['name', 'short_description', 'description', 'date', 'time', 'location', 'image']

        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Nombre del evento'}),
            'short_description': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Descripción corta'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Descripción completa'}),
            'date': forms.DateInput(attrs={'class': 'form-control', 'type': 'date'}),
            'time': forms.TimeInput(attrs={'class': 'form-control', 'type': 'time'}),
            'location': forms.Select(attrs={'class': 'form-control'}),
            'image': forms.FileInput(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        super(EventForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'Guardar'))


class LocationForm(forms.ModelForm):
    class Meta:
        model = Location
        fields = [
            'name', 'address', 'city', 'state', 'phone', 'email', 'website', 'image', 'capacity', 'iframe'
        ]

        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Nombre de la ubicación'}),
            'address': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Dirección'}),
            'city': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Ciudad'}),
            'state': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Estado'}),
            'phone': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Teléfono'}),
            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Correo electrónico'}),
            'website': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'Sitio web'}),
            'image': forms.FileInput(attrs={'class': 'form-control'}),
            'capacity': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Capacidad'}),
            'iframe': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Iframe del mapa'}),
        }

    def __init__(self, *args, **kwargs):
        super(LocationForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'Guardar'))



class EventReservationForm(forms.ModelForm):
    class Meta:
        model = EventReservation
        fields = ['event', 'name', 'email', 'phone']  # Asegúrate de incluir el campo 'event'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['event'].widget = forms.HiddenInput()  # Ocultar el campo 'event' si no es editable






from django.db import models

class Location(models.Model):
    name = models.CharField(max_length=255)
    city = models.CharField(max_length=255, default="Buenos Aires") # Cuidad (Buenos Aires)
    state = models.CharField(max_length=255, null=True, blank=True) # Localidad
    address = models.CharField(max_length=255)
    phone = models.CharField(max_length=255, null=True, blank=True)
    email = models.EmailField(null=True, blank=True)
    website = models.URLField(null=True, blank=True)
    image = models.ImageField(upload_to='locations')
    capacity = models.IntegerField(null=True, blank=True)
    iframe = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name
    

class Event(models.Model):

    STATE_CHOICES = (
        ('vigente', 'vigente'),
        ('pasado', 'pasado'),
       ('proximo', 'proximo'),
    )

    name = models.CharField(max_length=255)
    short_description = models.CharField(max_length=255)
    description = models.TextField()
    date = models.DateField()
    time = models.TimeField()
    location = models.ForeignKey(Location, on_delete=models.CASCADE, related_name='events')
    image = models.ImageField(upload_to='events')
    state = models.CharField(max_length=255, choices=STATE_CHOICES, default='proximo') # Ver cambio automatico de state con serializers?
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


class EventReservation(models.Model):
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='reservations', verbose_name='Evento')
    name = models.CharField(max_length=255, verbose_name='Nombre')
    email = models.EmailField(verbose_name='Email')
    phone = models.CharField(max_length=255, verbose_name='Teléfono')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name
    


    


    
from django.test import TestCase


from .views import *
from django.urls import path


urlpatterns = [    
    path('list/', EventListView.as_view(), name='events'),
    path('evento/<int:pk>/', EventDetailView.as_view(), name='event_detail'),
    path('evento/create/', EventCreateView.as_view(), name='event_create'),
    path('evento/update/<int:pk>/', EventUpdateView.as_view(), name='event_update'),
    path('evento/delete/<int:pk>/', EventDeleteView.as_view(), name='event_delete'),
    path('evento/<int:pk>/reservar-lugar/', EventReservationView.as_view(), name='event_reservation'),
    
    path('locaciones/', LocationListView.as_view(), name='location_list'),
    path('locacion/<int:pk>/', LocationDetailView.as_view(), name='location_detail'),
    path('locacion/create/', LocationCreateView.as_view(), name='location_create'),

]
from django.shortcuts import render
from django.views.generic import TemplateView, DetailView, FormView, ListView, CreateView, UpdateView, DeleteView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.shortcuts import redirect
from core.mixins import StaffRequiredMixin
from django.contrib import messages

from .models import *
from .forms import *

from django.shortcuts import get_object_or_404
from django.utils import timezone

import os
from dotenv import load_dotenv

load_dotenv()

WP_PHONE_NUMBER = os.getenv('WP_PHONE_NUMBER')


class EventListView(ListView):
    model = Event
    template_name = 'events/event_list.html'
    context_object_name = 'events'

    def get_queryset(self):
        return Event.objects.all().order_by('-date')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['today'] = timezone.now().date()
        return context

class EventDetailView(DetailView, FormView):
    model = Event
    template_name = 'events/event_detail.html'
    form_class = EventReservationForm

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = self.get_form()
        context['today'] = timezone.now().date()
        return context

    def get_form(self, form_class=None):
        event = self.get_object()
        form = super().get_form(form_class)
        form.fields['event'].initial = event
        form.fields['event'].widget.attrs['readonly'] = True
        return form

    def form_valid(self, form):
        form.save()
        messages.success(self.request, 'Reserva realizada con éxito.')
        return redirect(reverse('event_detail', args=[self.get_object().id]))


class EventUpdateView(LoginRequiredMixin, StaffRequiredMixin, UpdateView):
    model = Event
    form_class = EventForm
    template_name = 'events/event_update_form.html'
    success_url = reverse_lazy('events')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = self.get_form()
        context['event'] = self.get_object()
        return context

    def form_valid(self, form):
        return super().form_valid(form)


class EventDeleteView(LoginRequiredMixin, StaffRequiredMixin, DeleteView):
    model = Event
    success_url = reverse_lazy('events')
    template_name = 'events/event_confirm_delete.html'


class EventCreateView(LoginRequiredMixin, StaffRequiredMixin, CreateView):
    model = Event
    form_class = EventForm
    template_name = 'events/event_create_form.html'
    success_url = reverse_lazy('events')

    def form_valid(self, form):
        return super().form_valid(form)
    


class LocationDetailView(DetailView):
    model = Location
    template_name = 'events/location_detail.html'
    context_object_name = 'location'


class LocationCreateView(LoginRequiredMixin, StaffRequiredMixin, CreateView):
    model = Location
    form_class = LocationForm
    template_name = 'events/location_form.html'
    success_url = reverse_lazy('under_construction')


class LocationUpdateView(LoginRequiredMixin, StaffRequiredMixin, UpdateView):
    model = Location
    form_class = LocationForm
    template_name = 'events/location_form.html'
    success_url = reverse_lazy('under_construction')


class LocationListView(ListView):
    model = Location
    template_name = 'events/location_list.html'
    context_object_name = 'locations'



class EventReservationView(CreateView):
    model = EventReservation
    form_class = EventReservationForm
    template_name = 'events/event_reservation.html'

    def get_success_url(self):
        return reverse('event_detail', args=[self.object.event.id])

    def form_valid(self, form):
        form.instance.event = get_object_or_404(Event, pk=self.kwargs['pk'])
        messages.success(self.request, 'Reservación exitosa.')
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['event'] = get_object_or_404(Event, pk=self.kwargs['pk'])
        context['wp_phone_number'] = WP_PHONE_NUMBER
        return context
    
from django.contrib import admin

from django.apps import AppConfig


class AcademyConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'academy'
from django import forms
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit
from .models import *




class WorkshopForm(forms.ModelForm):
    class Meta:
        model = Workshop
        fields = ['name', 'description', 'day', 'init_time', 'end_time', 'price', 'location', 'image', 'max_participants'] #, 'teachers']

        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Nombre del taller'}),
            'description': forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Descripción del taller'}),
            'day': forms.Select(attrs={'class': 'form-control'}),
            'init_time': forms.TimeInput(attrs={'class': 'form-control', 'type': 'time'}),
            'end_time': forms.TimeInput(attrs={'class': 'form-control', 'type': 'time'}),
            'price': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Precio'}),
            'location': forms.Select(attrs={'class': 'form-control'}),
            'image': forms.FileInput(attrs={'class': 'form-control'}),
            'max_participants': forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Máximo de participantes'}),
        }

    def __init__(self, *args, **kwargs):
        super(WorkshopForm, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_method = 'post'
        self.helper.add_input(Submit('submit', 'Guardar'))


from django.db import models
from users.models import *
from events.models import *






    

class Workshop(models.Model):

    DAY_CHOICES = [
        ('Monday', 'Lunes'),
        ('Tuesday', 'Martes'),
        ('Wednesday', 'Miércoles'),
        ('Thursday', 'Jueves'),
        ('Friday', 'Viernes'),
        ('Saturday', 'Sábado'),
        ('Sunday', 'Domingo')
    ]

    TYPE_CHOICES = [
        ('1', 'Instrumento'),
        ('2', 'Teoria'),
        ('3', 'Taller'),
        ('4', 'Otro')
    ]

    MODALITY_CHOICES = [
        ('1', 'Presencial'),
        ('2', 'Online'),
        ('3', 'Híbrido'),
        ('4', 'A domicilio'),
        ('5', 'Asincrónico')
    ]

    name = models.CharField(max_length=255)
    description = models.TextField()
    day = models.CharField(max_length=15, choices=DAY_CHOICES)
    init_time = models.TimeField()
    end_time = models.TimeField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    location = models.ForeignKey(Location, on_delete=models.CASCADE, null=True, blank=True)
    image = models.ImageField(upload_to='workshops')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    max_participants = models.PositiveIntegerField()

    def __str__(self):
        return self.name
    













    

    
from django.test import TestCase


from django.urls import path
from .views import *

urlpatterns = [
    path('talleres/list/', WorkshopListView.as_view(), name='workshop_list'),
    path('taller/create/', WorkshopCreateView.as_view(), name='workshop_create'),
    path('taller/<int:pk>/', WorkshopDetailView.as_view(), name='workshop_detail'),
    path('taller/update/<int:pk>/', WorkshopUpdateView.as_view(), name='workshop_update'),
    path('taller/delete/<int:pk>/', WorkshopDeleteView.as_view(), name='workshop_delete'),
]





from django.shortcuts import render
from django.contrib.admin.views.decorators import staff_member_required
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.contrib.auth.mixins import LoginRequiredMixin
from core.mixins import StaffRequiredMixin
from django.urls import reverse_lazy

from .models import *
from .forms import *

import os
from dotenv import load_dotenv  
load_dotenv()

WP_PHONE_NUMBER = os.getenv('WP_PHONE_NUMBER')


class WorkshopListView(ListView):
    model = Workshop
    template_name = 'academy/workshops/workshop_list.html'
    context_object_name = 'talleres'

    def get_queryset(self):
        return Workshop.objects.all().order_by('created_at')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['wp_phone_number'] = WP_PHONE_NUMBER
        return context
    

class WorkshopDetailView(DetailView):
    model = Workshop
    template_name = 'academy/workshops/workshop_detail.html'
    context_object_name = 'workshop'


class WorkshopCreateView(LoginRequiredMixin, StaffRequiredMixin, CreateView):
    model = Workshop
    template_name = 'academy/workshops/workshop_form.html'
    fields = '__all__'
    success_url = '/academia/talleres'


class WorkshopUpdateView(LoginRequiredMixin, StaffRequiredMixin, UpdateView):
    model = Workshop
    template_name = 'academy/workshops/workshop_update_form.html'
    fields = '__all__'
    success_url = 'academia/talleres/'


class WorkshopDeleteView(LoginRequiredMixin, StaffRequiredMixin, DeleteView):
    model = Workshop
    template_name = 'academy/workshops/workshop_confirm_delete.html'
    success_url = 'academia/talleres/'















    









